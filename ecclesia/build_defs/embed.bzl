"""Starlark definitions for build rules embed data files directly into code libraries."""

def cc_data_library(
        name,
        data,
        cc_namespace,
        var_name,
        visibility = None,
        flatten = False):
    """Define a data library containing a set of embedded files.

    A cc_library will be generated by this rule that exports an array containing
    embedded data from all of the given data files. This library will have a
    header named ${name}.h and a source file named ${name}.cc.

    By default all the data files will be embedded using their path relative to
    the package name. If the flatten argument is true then their names will be
    reduced to their base names.

    Args:
      name: The name of the cc_library that will contain the embedded data.
      data: A list of data files to embed into the cc_library.
      cc_namespace: The C++ namespace to wrap the generated variable into.
      var_name: The name of the C++ variable used to access the data.
      visibility: The visibility of the generated cc_library.
      flatten: If true, embed all the data file names using just their basename.
    """
    flatten_arg = "--flatten" if flatten else ""
    native.genrule(
        name = name + "__generator",
        srcs = data,
        outs = [name + ".cc", name + ".h"],
        cmd = ("$(location //ecclesia/lib/file:cc_embed) " +
               "--output_name=%s --output_dir=\"$(@D)\" --namespace=%s --variable_name=%s " +
               "--strip_prefixes=$(BINDIR),$(GENDIR),%s %s " +
               "$(SRCS)") %
              (name, cc_namespace, var_name, native.package_name(), flatten_arg),
        tools = ["//ecclesia/lib/file:cc_embed"],
    )

    native.cc_library(
        name = name,
        srcs = [name + ".cc"],
        hdrs = [name + ".h"],
        deps = ["//ecclesia/lib/file:cc_embed_interface"],
        visibility = visibility,
    )
